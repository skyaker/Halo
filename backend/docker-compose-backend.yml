services:
  nginx:
    image: nginx
    ports:
      - "8080:80"
    volumes:
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    depends_on:
      - auth_service
      - note_service
      - user_service
    restart: always
    networks: [backend]

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    restart: always
    networks: [backend]

  note_service:
    container_name: note_service
    ports: 
      - "8080"
    build:
      context: ./note_service
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    networks: [backend]

  user_service:
    container_name: user_service
    ports: 
      - "8080"
    build:
      context: ./user_service
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    networks: [backend]

  auth_service:
    container_name: auth_service
    ports: 
      - "8080"
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    networks: [backend]

networks:
  backend:
    driver: bridge
    external: true
